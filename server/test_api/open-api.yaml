openapi: 3.0.0
info:
    title: Tiktok API
    version: 1.0
servers:
    - url: http://localhost:8000/api/v1
paths:
    /auth/register:
        post:
            summary: Register a new user
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                fullName:
                                    type: string
                                userName:
                                    type: string
                                password:
                                    type: string
                                association:
                                    type: string
            responses:
                '200':
                    description: Successful operation
    /auth/login:
        post:
            summary: Log in to the system
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                emailOrUsername:
                                    type: string
                                password:
                                    type: string
            responses:
                '200':
                    description: Successful operation
    /auth/vertify-email:
        post:
            summary: Verify email
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                otp:
                                    type: string
            responses:
                '200':
                    description: Successful operation
    /user/{userId}:
        get:
            summary: Get user by ID
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
        put:
            summary: Update user by ID
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                userName:
                                    type: string
            responses:
                '200':
                    description: Successful operation
        delete:
            summary: Remove user avatar
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
    /user/avatar/{userId}:
        post:
            summary: Upload user avatar
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                avatar:
                                    type: string
                                    format: binary
                                    description: The avatar file to upload
            responses:
                '200':
                    description: Successful operation
        delete:
            summary: Remove user avatar
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
    /post:
        get:
            summary: Get all posts
            responses:
                '200':
                    description: Successful operation
    /post/{postId}:
        get:
            summary: Get post by ID
            parameters:
                - name: postId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
    /post/user/{userId}:
        get:
            summary: Get posts by user ID
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
        post:
            summary: Upload post
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                video:
                                    type: string
                                    format: binary
                                    description: Video file
                                thumnail:
                                    type: string
                                    format: binary
                                    description: Thumnail file (optional)

            responses:
                '200':
                    description: Successful operation
    /follow/{userId}:
        post:
            summary: Follow a user
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
        delete:
            summary: Unfollow a user
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int
            responses:
                '200':
                    description: Successful operation
    /follow/followers/{userId}:
        get:
            summary: Get followers of a user
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
    /follow/following/{userId}:
        get:
            summary: Get users following a user
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                '200':
                    description: Successful operation
    /user:
        get:
            summary: Retrieve all users
            operationId: getUsers
            responses:
                '200':
                    description: A list of users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
components:
    schemas:
        User:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                username:
                    type: string
                email:
                    type: string
                    format: email
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time
            required:
                - id
                - username
                - email
                - createdAt
                - updatedAt
        LoginRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                password:
                    type: string
            required:
                - email
                - password
        LoginResponse:
            type: object
            properties:
                token:
                    type: string
        UserAvatarResponse:
            type: object
            properties:
                avatarUrl:
                    type: string
                    format: uri
